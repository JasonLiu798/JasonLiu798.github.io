<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on JasonLiu&#39;s Blog</title>
    <link>http://JasonLiu798.github.io/tags/redis/</link>
    <description>Recent content in Redis on JasonLiu&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>jasondliu@foxmail.com (JasonLiu)</managingEditor>
    <webMaster>jasondliu@foxmail.com (JasonLiu)</webMaster>
    <copyright>(c) 2015 JasonLiu.</copyright>
    <lastBuildDate>Sun, 20 Mar 2016 17:54:21 +0800</lastBuildDate>
    <atom:link href="http://JasonLiu798.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>redis开发札记</title>
      <link>http://jasonliu798.github.io/blog/2016-03-20-redis%E5%BC%80%E5%8F%91%E6%9C%AD%E8%AE%B0/</link>
      <pubDate>Sun, 20 Mar 2016 17:54:21 +0800</pubDate>
      <author>jasondliu@foxmail.com (JasonLiu)</author>
      <guid>http://jasonliu798.github.io/blog/2016-03-20-redis%E5%BC%80%E5%8F%91%E6%9C%AD%E8%AE%B0/</guid>
      <description>&lt;p&gt;由于公司收藏功能全部使用redis存储数据，数据库冷备，redis流量不断增加，最后经过技术选型，使用twemproxy增加redis分片，容纳更多流量。
然而在开发中出现一些问题&lt;/p&gt;

&lt;p&gt;#hashtag&lt;br /&gt;
首先是开发中用到了redis的有序数组，即zset，并且使用到其中一条命令ZUNIONSTORE，在测试环境的单机系统中功能正常，但是线上环境twemproxy中功能却不能正常使用，数据异常，不得不紧急回滚。
查询twemproxy的&lt;a href=&#34;https://github.com/twitter/twemproxy/blob/master/notes/redis.md&#34;&gt;Redis Command Support&lt;/a&gt;，支持的命令包含ZUNIONSTORE，但下面包含一行小字&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ZINTERSTORE and ZUNIONSTORE support requires that the supplied keys hash to the same server. You can ensure this by using the same hashtag for all keys in the command. Twemproxy does no checking on its end to verify that all the keys hash to the same server, and the given command is forwarded to the server that the first key hashes to.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;zset的命令中，不光是ZUNIONSTORE，ZINTERSTORE也需要将key hash到同一分片服务器，才能保证结果正常。
这里的hash需要key使用&lt;a href=&#34;https://github.com/twitter/twemproxy/blob/master/notes/recommendation.md#hash-tags&#34;&gt;hashtag&lt;/a&gt;，即在key中添加{}，默认情况下，twemproxy会使用整个key来计算哈希；如果存在{}，twemproxy只使用{}内的数据，计算hash值。
如果不想改动key，而且数据量较小，也可以手动zrange出两个zset再zadd到目的key，不过这个操作的流量、CPU开销，就是zeunion的几倍了。&lt;/p&gt;

&lt;p&gt;此文档特殊备注的还有以下几个命令：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MSET support is not Atomic&lt;/code&gt; mset操作不是原子的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RPOPLPUSH, SIDFF, SDIFFSTORE, SINTER, SINTERSTORE, SMOVE, SUNION, SUNIONSTORE, PFMERGE&lt;/code&gt;同样要求，源key和目标key，使用hashtag，hash到同一台服务器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EVAL&lt;/code&gt;使用多个key时，要求同上&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;#pipeline优化&lt;/p&gt;

&lt;p&gt;#连接获取超时&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>cygwin编译redis</title>
      <link>http://jasonliu798.github.io/blog/2015-09-27-cygwin%E7%BC%96%E8%AF%91redis/</link>
      <pubDate>Sun, 27 Sep 2015 12:55:10 +0800</pubDate>
      <author>jasondliu@foxmail.com (JasonLiu)</author>
      <guid>http://jasonliu798.github.io/blog/2015-09-27-cygwin%E7%BC%96%E8%AF%91redis/</guid>
      <description>&lt;p&gt;由于经常使用cygwin，windows上又没有命令行版的redis客户端，因此准备编译一个，没想到遇到一个恶心问题。&lt;/p&gt;

&lt;p&gt;先到官网下了源码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;wget https://github.com/antirez/redis/archive/2.8.22.tar.gz
tar -zpxvf redis-2.8.22.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cygwin需要安装gcc和make，使用setup.exe安装，安完后的环境&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gcc -v
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-pc-cygwin/4.9.3/lto-wrapper.exe
目标：x86_64-pc-cygwin

$ make -v
GNU Make 4.1
Built for x86_64-unknown-cygwin
Copyright (C) 1988-2014 Free Software Foundation, Inc.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译需要修改几个源文件，参考&lt;a href=&#34;http://my.oschina.net/maxid/blog/186506&#34;&gt;Windows 7 64位下编译Redis-2.8.3/Redis-3.0.1&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;src/redis.h修改
/* Cygwin Fix */   
#ifdef __CYGWIN__   
#ifndef SA_ONSTACK   
#define SA_ONSTACK 0x08000000   
#endif   
#endif
/deps/hiredis/net.c 在 #include &amp;quot;sds.h&amp;quot;后增加以下代码
/* Cygwin Fix */   
#ifdef __CYGWIN__
#define TCP_KEEPCNT 8
#define TCP_KEEPINTVL 150
#define TCP_KEEPIDLE 14400
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开始编译&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd deps
$ make lua hiredis linenoise
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;问题来了，提示了一堆类型找不到&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/include/netinet/tcp.h:54:2: error: unknown type name ‘u_short’
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看编译提示得知hiredis/net.c中include了&lt;netinet/tcp.h&gt;，tcp.h中需要u_short这些类型，这些类型都是定义在&lt;sys/types.h&gt;头文件中，检查代码并没有缺少include &lt;sys/types.h&gt;，使用gcc -v deps/hiredis/net.c，查看头文件搜索目录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;quot;...&amp;quot; 搜索从这里开始：
#include &amp;lt;...&amp;gt; 搜索从这里开始：
 /usr/lib/gcc/x86_64-pc-cygwin/4.9.3/include
 /usr/lib/gcc/x86_64-pc-cygwin/4.9.3/include-fixed
 /usr/include
 /usr/lib/gcc/x86_64-pc-cygwin/4.9.3/../../../../lib/../include/w32api
搜索列表结束。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;搜索到了/usr/include目录，而且目录下有sys/types.h&lt;/p&gt;

&lt;p&gt;因此怀疑编译环境有问题，注意到make -v实际提示的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Built for x86_64-unknown-cygwin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;x86后面跟的是unknown，而不是跟gcc-v一样的pc
尝试装了32位版的cygwin和编译环境，make -v&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Built for x86-pc-cygwin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;提示正常了，但编译后依旧如此提示错误，考虑到编译后主要使用客户端，那就只好先把#include &lt;netinet/tcp.h&gt;的相关代码全部注释了，之后make正常，make install ，redis-cli可用&lt;/p&gt;

&lt;p&gt;然而&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/include/netinet/tcp.h:54:2: error: unknown type name ‘u_short’
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个提示在查找了很多资料都没找到解决办法，算是个遗憾。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>